/*
*–°–µ –æ—Ä–≥–∞–Ω–∏–∑–∏—Ä–∞ –∫–æ–ª–æ–∫–≤–∏—É–º—Å–∫–∞ –Ω–µ–¥–µ–ª–∞ –Ω–∞ –§–ò–ù–ö–ò –∏ –∑–∞ —Ç–∞–∞ —Ü–µ–ª –∞—Å–∏—Å—Ç–µ–Ω—Ç–∏—Ç–µ —Å–µ –¥–æ–¥–µ–ª—É–≤–∞–∞—Ç –∑–∞ 
 *—á—É–≤–∞—ö–µ –Ω–∞ –∏—Å–ø–∏—Ç–∏. –ó–∞ —Ç–∞–∞ —Ü–µ–ª —Å–µ –ø—Ä–∞–≤–∏ —Ä–µ–¥–∏—Ü–∞ –æ–¥ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∏—Ç–µ –≤–æ –∫–æ—ò–∞ –Ω–∞ –ø–æ—á–µ—Ç–æ–∫ —Å–µ 
 *n–∞—ò–º–ª–∞–¥–∏—Ç–µ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∏, –∞ –Ω–∞ –∫—Ä–∞—ò —Å–µ –Ω–∞—ò–≤–æ–∑—Ä–∞—Å–Ω–∏—Ç–µ. –ü–æ—Ç–æ–∞ —Å–µ –¥–∞–≤–∞–∞—Ç –ø—Ä–µ–¥–º–µ—Ç–∏—Ç–µ –∏ –ø–æ –∫–æ–ª–∫—É
 *–∞—Å–∏—Å—Ç–µ–Ω—Ç–∏ —Å–µ –ø–æ—Ç—Ä–µ–±–Ω–∏ –∑–∞ —á—É–≤–∞—ö–µ –Ω–∞ —Å–µ–∫–æ—ò –ø—Ä–µ–¥–º–µ—Ç.–ò–º–∞ –Ω–µ–∫–æ–∏ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∏ –∫–æ–∏ —Å–µ –æ—Ç—Å—É—Ç–Ω–∏ 
 *–≤–æ —Ç–µ–∫–æ–≤–Ω–∞—Ç–∞ –∫–æ–ª–æ–∫–≤–∏—É–º—Å–∫–∞ –Ω–µ–¥–µ–ª–∞. –ó–∞—Ç–æ–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª–Ω–æ —Å–µ –¥–∞–≤–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–∏ –æ–¥ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∏—Ç–µ
 *—Å–µ –æ—Ç—Å—É—Ç–Ω–∏. –ê—Å–∏—Å—Ç–µ–Ω—Ç–∏—Ç–µ —Å–µ –¥–æ–¥–µ–ª—É–≤–∞–∞—Ç –Ω–∞ —Å–ª–µ–¥–Ω–∏–æ—Ç –Ω–∞—á–∏–Ω: –ü—Ä–≤–æ —Å–µ –¥–æ–¥–µ–ª—É–≤–∞–∞—Ç –Ω–∞—ò–º–ª–∞–¥–∏—Ç–µ,
 *–∞ –Ω–∞ –∫—Ä–∞—ò –Ω–∞—ò—Å—Ç–∞—Ä–∏—Ç–µ, —Å–æ —Ç–æ–∞ —à—Ç–æ –∞–∫–æ –Ω–µ–∫–æ—ò –∞—Å–∏—Å—Ç–µ–Ω—Ç –µ –æ—Ç—Å—É—Ç–µ–Ω —Ç–æ—ò —Å–µ –∏–≥–Ω–æ—Ä–∏—Ä–∞ –≤–æ —Ä–µ–¥–∏—Ü–∞—Ç–∞.
 *–ü–æ—Å–ª–µ —Å–µ–∫–æ–µ –¥–æ–¥–µ–ª—É–≤–∞—ö–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∞—Å–∏—Å—Ç–µ–Ω—Ç–æ—Ç —Å–µ —Å–º–µ—Å—Ç—É–≤–∞ –Ω–∞ –∫—Ä–∞—ò –Ω–∞ —Ä–µ–¥–∏—Ü–∞—Ç–∞ (—Ç.–µ. –∞–∫–æ –Ω–∞ 
 *—Å–µ–∫–æ—ò –∞—Å–∏—Å—Ç–µ–Ω—Ç –º—É —Å–µ –¥–æ–¥–µ–ª–∏–ª –∑–∞ —á—É–≤–∞—ö–µ –ø—Ä–µ–¥–º–µ—Ç, –∞ –∏–º–∞ –ø–æ—Ç—Ä–µ–±–∞ –æ–¥ —É—à—Ç–µ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∏, –ø–æ–≤—Ç–æ—Ä–Ω–æ 
 *—Å–µ –∑–∞–ø–æ—á–Ω—É–≤–∞ –æ–¥ –Ω–∞—ò–º–ª–∞–¥–∏—Ç–µ).
–í–ª–µ–∑: –°–µ –¥–∞–≤–∞ –ø—Ä–≤–æ –±—Ä–æ—ò–æ—Ç –Ω–∞ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∏ –∏ –∏–º–∏—ö–∞—Ç–∞ –Ω–∞ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∏—Ç–µ –æ–¥ –Ω–∞—ò–º–ª–∞–¥ –¥–æ –Ω–∞—ò—Å—Ç–∞—Ä. 
–°–ª–µ–¥–Ω–æ —Å–µ –¥–∞–≤–∞ –±—Ä–æ—ò–æ—Ç –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç–∏ –∑–∞ –∫–æ–∏ —Å–µ –ø–æ—Ç—Ä–µ–±–Ω–∏ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∏, –ø–∞ —Å–µ –Ω–∞–≤–µ–¥—É–≤–∞–∞—Ç –ø—Ä–µ–¥–º–µ—Ç–∏—Ç–µ
–∏ –ø–æ –∫–æ–ª–∫—É –∞—Å–∏—Å—Ç–µ–Ω—Ç–∏ —Å–µ –ø–æ—Ç—Ä–µ–±–Ω–∏ –∑–∞ —Å–µ–∫–æ—ò –ø—Ä–µ–¥–º–µ—Ç. –ü–æ—Ç–æ–∞ —Å–µ –¥–∞–≤–∞ –±—Ä–æ—ò–æ—Ç –Ω–∞ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∏ –∫–æ–∏ —Å–µ
–æ—Ç—Å—É—Ç–Ω–∏ –∏ —Å–ø–∏—Å–æ–∫–æ—Ç –Ω–∞ —Ç–µ–∫–æ–≤–Ω–æ –æ—Ç—Å—É—Ç–Ω–∏—Ç–µ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∏. 
–ù–∞ –∏–∑–ª–µ–∑ —Å–µ –ø–µ—á–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç, –ø–∞ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∏ –∑–∞–¥–æ–ª–∂–µ–Ω–∏ –∑–∞ —á—É–≤–∞—ö–µ –Ω–∞ —Ç–æ—ò –ø—Ä–µ–¥–º–µ—Ç (–∑–∞ —Å–µ–∫–æ—ò –æ–¥ –¥–∞–¥–µ–Ω–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç–∏).*/
 
/*Sample input
4
IlinkaIvanoska
IgorKulev
MagdalenaKostoska
HristinaMihajloska
3
APS 3
MIS 1
OOS 2
1
HristinaMihajloska
 
Sample output
APS
3
IlinkaIvanoska
IgorKulev
MagdalenaKostoska
MIS
1
IlinkaIvanoska
OOS
2
IgorKulev
MagdalenaKostoska
*/


public class Asistenti {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int brAsistenti = Integer.parseInt(sc.nextLine());
        LinkedQueue<String> asistenti = new LinkedQueue<>();

        for (int i = 0; i < brAsistenti; i++) {
            asistenti.enqueue(sc.nextLine());
        }

        int brPredmeti = Integer.parseInt(sc.nextLine());
        LinkedQueue<String> predmeti = new LinkedQueue<>();

        for (int i = 0; i < brPredmeti; i++) {
            predmeti.enqueue(sc.nextLine());
        }

        int brOtsutniProf = Integer.parseInt(sc.nextLine());
        ArrayList<String> otsutniList = new ArrayList<>();//–í–æ —É—Å–ª–æ–≤–æ—Ç –æ–¥ –∑–∞–¥–∞—á–∞—Ç–∞ —Å–µ –≤–µ–ª–∏ –¥–µ–∫–∞ –ø—Ä–≤–æ —Å–µ –¥–∞–≤–∞ –±—Ä–æ—ò–æ—Ç –Ω–∞ –æ—Ç—Å—É—Ç–Ω–∏ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∏,
     //–ø–∞ –ø–æ—Ç–æ–∞ —Å–µ –≤–Ω–µ—Å—É–≤–∞–∞—Ç –∏–º–∏—ö–∞—Ç–∞.‚Üí –¢–æ–∞ –∑–Ω–∞—á–∏ –¥–µ–∫–∞ –æ–¥ –ø–æ—á–µ—Ç–æ–∫ —Ç–æ—á–Ω–æ –∑–Ω–∞–µ–º–µ –∫–æ–ª–∫—É –µ–ª–µ–º–µ–Ω—Ç–∏ –∏–º–∞.
     //–ê–∫–æ –æ–¥–Ω–∞–ø—Ä–µ–¥ —ò–∞ –∑–Ω–∞–µ—à –¥–æ–ª–∂–∏–Ω–∞—Ç–∞, —Å–æ—Å–µ–º–∞ –µ –≤–æ —Ä–µ–¥ –¥–∞ –∫–æ—Ä–∏—Å—Ç–∏—à –æ–±–∏—á–Ω–∞ –Ω–∏–∑–∞. String[] otsutniArr = new String[brOtsutniProf];


        for (int i = 0; i < brOtsutniProf; i++) {
            otsutniList.add(sc.nextLine());
        }

        LinkedQueue<String> asistentiFinal = new LinkedQueue<>();

        while (!asistenti.isEmpty()) {
            String curr = asistenti.dequeue();
            if (!otsutniList.contains(curr)) {
                asistentiFinal.enqueue(curr);
            }
        }

        while (!predmeti.isEmpty()) {
            String[] razdeliPredmet = predmeti.dequeue().split(" ");
            String imePredmet = razdeliPredmet[0];
            int potrebniAsistenti = Integer.parseInt(razdeliPredmet[1]);

            System.out.println(imePredmet);
            System.out.println(potrebniAsistenti);

            for (int i = 0; i < potrebniAsistenti; i++) {
                System.out.println(asistentiFinal.peek());
                asistentiFinal.enqueue(asistentiFinal.dequeue());
            }
        }

        sc.close();
    }
}

/*

–°–æ –Ω–∏–∑–∞ –º–æ—Ä–∞—à –≤–∞–∫–∞ –¥–∞ –ø—Ä–æ–≤–µ—Ä—É–≤–∞—à:

boolean isAbsent = false;
for (int i = 0; i < otsutniArr.length; i++) {
    if (otsutniArr[i].equals(asistent)) {
        isAbsent = true;
        break;
    }
}


–°–æ –ª–∏—Å—Ç–∞ –µ –ø–æ–∫—Ä–∞—Ç–∫–æ:

if (otsutniList.contains(asistent)) {
    // –æ—Ç—Å—É—Ç–µ–Ω –µ
}

üü¶ 1. –ö–æ–≥–∞ –∫–æ—Ä–∏—Å—Ç–∏–º–µ –Ω–∏–∑–∞ (String[])

–ù–∏–∑–∞—Ç–∞ –µ –æ–±–∏—á–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ —Ñ–∏–∫—Å–Ω–∞ –¥–æ–ª–∂–∏–Ω–∞.

–ù–µ –∑–Ω–∞–µ —Å–∞–º–∞ –¥–∞ –ø—Ä–æ–≤–µ—Ä—É–≤–∞ –¥–∞–ª–∏ –Ω–µ–∫–æ—ò –µ–ª–µ–º–µ–Ω—Ç –ø–æ—Å—Ç–æ–∏ –≤–æ –Ω–µ–∞.

–ó–∞—Ç–æ–∞ –º–æ—Ä–∞ —Ä–∞—á–Ω–æ –¥–∞ —ò–∞ ‚Äû–ø—Ä–µ–ª–∏—Å—Ç–∞–º–µ‚Äú:

boolean isAbsent = false;
for (int i = 0; i < otsutniArr.length; i++) {
    if (otsutniArr[i].equals(asistent)) {
        isAbsent = true;   // –≥–æ –Ω–∞—ò–¥–æ–≤–º–µ
        break;             // –º–æ–∂–µ–º–µ –¥–∞ –ø—Ä–µ–∫–∏–Ω–µ–º–µ
    }
}


–¢—É–∫–∞ –Ω–∏–µ —Å–∞–º–∏ –∏–º–ø–ª–µ–º–µ–Ω—Ç–∏—Ä–∞–º–µ ‚Äûcontains‚Äú –ª–æ–≥–∏–∫–∞.

üü© 2. –ö–æ–≥–∞ –∫–æ—Ä–∏—Å—Ç–∏–º–µ –ª–∏—Å—Ç–∞ (ArrayList)

ArrayList –µ –∫–ª–∞—Å–∞ –æ–¥ Java Collections Framework.

–¢–∞–∞ –≤–µ—ú–µ –∏–º–∞ –º–µ—Ç–æ–¥ .contains(Object o) –∫–æ—ò –≤–Ω–∞—Ç—Ä–µ—à–Ω–æ –ø—Ä–∞–≤–∏ –∏—Å—Ç–æ –æ–≤–∞ for-loop, –∞–º–∞ –Ω–∏–µ –Ω–µ –º–æ—Ä–∞–º–µ –¥–∞ –≥–æ –ø–∏—à—É–≤–∞–º–µ.

if (otsutniList.contains(asistent)) {
    // –æ—Ç—Å—É—Ç–µ–Ω –µ
}


–ó–Ω–∞—á–∏: contains = –∏—Å—Ç–∞—Ç–∞ –ª–æ–≥–∏–∫–∞, –Ω–æ –∏–º–ø–ª–µ–º–µ–Ω—Ç–∏—Ä–∞–Ω–∞ –≤–Ω–∞—Ç—Ä–µ –≤–æ Java –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ç–∞.



*/
