АЛГОРИТАМ-процедура за решавање на одреден проблем
  Алгоритмите треба да бидат:
• Коректни
• Ефикасни
• Лесни за имплементација

Информациите кои треба да бидат процесирани од страна на програмата се чуваат во податочни структури - data structures
  
Податочните структури може да бидат
 Статични
• промени само на вредностите
• низи (arrays) или записи (records))
 Динамички
• промени и во изгледот, големината
• магацини (stacks), листи (lists), дрва (trees), датотеки (files))

Нотации
О-нотација- Горна граница на времето на извршување на алгоритамот. Ја мери комплексноста (сложеноста) во најлош случај.
Ω-нотација-Долна граница на времето на извршување на алгоритамот. Ја мери комплексноста (сложеноста) во најдобар случај (не е многу корисно).
θ-нотација-Долна и горна граница на времето на извршување на алгоритамот.Се користи при истражување во полето на анализа на алгоритми 

  ЛИНЕАРНИ ПОДАТОЧНИ СТРУКТУРИ
  •array
  •linked lists
  •stack
  •queue
  •hash tables

  НЕ-ЛИНЕРАЛНИ ПОДАТОЧНИ СТРУКТУРИ
  •tree
  •graph

  НИЗИ
  •последователно множество на мемориски локации
  •множество на подредени парови(индекс,вредност)
  •пристап до вредност на низа со нејзиниот индекс во O(1) време
  •статички структури,нивната големина е фиксна и не може да се промени после нивната декларација
  •чуваат елементи од ист тип под заедничко име
  •бришење O(n), во најдобар случај е бришење на првиот индекс O(1),во најлош случај бришење на последниот индекс O(n)
  •пребарување O(n) во општ случај
  
СЕ ЈАВУВА ПОТРЕБА ОД ДИНАМИЧКИ СТРУКТУРИ,за разлика од обичните низи тука спаѓаат ArrayList во JAVA,vector во C++
•автоматски растат во должина кога се обидуваме да направиме внес на нов елемент

  SLL-ЕДНОСТРАНО ПОВРЗАНИ ЛИСТИ
  •подреденоста на елементите е запазена,но нема потреба да има мемориски континуитет
  •sll множество на подредени елементи ,каде секој елемент е опишан со вредност на јазелот(теме)(data) и покажувач кон следниот јазел (link)
  •секој јазел освен последниот има наследник
  •секој јазел освен првиот има претходник
  •должина на листа=број на јазли 
  •додавањето и бришењето на елемент е поедноставно отколку кај низите 
  •потребна е дополнителна меморија за чување на покажувачите(следбениците) кои реално не носат корисна информација

  DLL-ДВОЈНО ПОВРЗАНИ ЛИСТИ 
  •јазелот ќе биде составен од data поле и 2 покажувачи ,кон следниот елемент и кон претходниот елемент 
  
АЛГОРИТМИ

•ТЕХНИКА НА ГРУБА СИЛА
-наједноставна техника за решавање проблеми
-ги испитува сите можни случаи
-гарантира дека ќе најде резултат

•АЛЧНИ АЛГОРИТМИ (GREEDY)
-секогаш го бараат локалното оптимално решение 
-го избира најдоброто што е достапно во моментот
-најчесто даваат коректно решение,но само за дел од доменот
-работат релативно брзо
•Постојат 2 верзии на алгоритмот:
  •не се знае следната големина на пакетот во низата се додека тековниот не се смести во некој ранец
  •познати се по големина сите пакети однапред
•NEXT-FIT РЕШЕНИЕ
  -првиот пакет се сместува во првиот ранец 
  -при сместување за секој следен пакет се проверува дали има место во ранецот каде што бил сместен претходниот пакет 
  -доколку нема место се проверува следниот ранец итн
•FIRST-FIT РЕШЕНИЕ
  -првиот пакет се сместува во првиот ранец
  -за секој следен пакет се проверуваат сите ранци од почеток и пакетот се сместува во првиот ранец кој има простор да го собере
  -нов ранец се користи само доколку нема место во претходно започнатите ранци
  •BEST-FIT РЕШЕНИЕ
  -првиот пакет се сместува во првиот ранец
  -за секој следен пакет се проверуваат сите ранци од почетокот и пакетот се сместува во ранецот во кој има најмал простор доволен да го собере пакетот со дадена големина
  -нов ранец се користи само доколку нема место во претходно започнатите ранци


  •РАЗДЕЛИ И ВЛАДЕЈ
  -решението најчесто се добива со рекурзија

  •ДИНАМИЧКО ПРОГРАМИРАЊЕ
  -се применува кај проблеми(функции) што се преклопуваат
  -користи дополнителна меморија за да ги сочува резултатите од потпроблемите 
  -клуч во решавање на задачи со динамичко програмирање е во наоѓање на добра состојба што ќе се запамети 
  -состојбата треба да не зазема многу меморија
  
ЕДНОДИМЕНЗИОНАЛНИ ПОДАТОЧНО СТРУКТУРИ
  •STACK-LIFO
  •QUEUE-FIFO

  HASH
  •hash табела со затворени кофички
  -во секој кофичка може да се сместат по повеќе елементи,кофичките се меѓусебно одвоени и не дозволуваат протекување од една во друга 

  •hash со отворени кофички
  -секоја кофичка може да содржи најмногу еден елемент,ако се појави колизија ,новиот елемент се преместува во друга кофичка 


  TREES
  •хиерархиска колекција на елементи
  •дрвото е колекција од елементи(јазли)
  •еден јазел е специјален(корен)
  •секој јазел има точно еден родител
  •секој јазел чува податоци од било кој податочен тип
  •јазел сам за себе претставува дрво->тогаш јазелот е и корен на дрво
  •бројот на поддрва на еден јазел-степен на јазел
  •сите јазли освен коренот имаат родител
  •слични дрва се дрва кои имаат иста структура
  •еквивалентни дрва-се дрва кои се слични ,но кои носат и иста информација во секој јазел
  •ако од едно дрво го избришеме коренот се добива шума 
  •должина на патека претставува број на врски меѓу два јазли ,т.е е за еден помала од бројот на јазли во патеката
  •степен на јазел-број на поддрва на еден јазел
  •висина на јазел во стебло е должина на најдолгата патека од јазелот до листовите
  •длабочина на јазел е должина на единствената патека од коренот до јазелот

  ПОДРЕДЕНИ ДРВА
  •кога редоследот на поддрвата во едно дрво е важен 

  БИНАРНИ ДРВА
  •секој јазел може да има најмногу 2 поддрва(лево и десно)
  •степенот на дрвото изнесува 2 
  •јазлите на бинарното дрво може:
  -да немаат наследници
  -имаат 1 или најмногу 2 наследници

  ПОЛНО БИНАРНО ДРВО
  •дрво во кое сите јазли,освен јазлите на листовите имаат 2 деца


  КОМПЛЕТНО БИНАРНО ДРВО
  •кога сите нивоа на бинарното дрво се целосно пополнети,освен последното ниво освен последното ниво кое може да содржи 1 или 2 деца и е исполнето од лево


  3 ОСНОВНИ НАЧИНИ НА ИЗМИНУВАЊЕ НА СИТЕ ЈАЗЛИ ВО ЕДНО БИНАРНО ДРВО
  •INOREDER
   левото поддрво,коренот,па десното поддрво
  •PREORDER
   корен-лево поддрво-десно поддрво
  •POSTORDER
   лево поддрво,десно поддрво,корен

  БАЛАНСИРАНО ПОДДРВО
  •Балансирано бинарно дрво е она бинарно дрвокаде што за секој јазел од дрвото важи дека висините на неговото лево и десно поддрво не се разликуваат за повеќе од еден

  AVL (Adelson-Velskii & Landis) дрво е бинарно пребарувачко дрво кое во истовреме е и балансирано дрво

  ГРАФ
 • Граф е множество на темиња меѓусебно поврзани со ребра.
 • Соседност на јазли: за јазелот v се вели дека е соседен на јазелот u ако постои реброто (v, u)
 • Степен на јазел: бројот на соседни јазли на даден јазел. Кај насочениот граф се разликуваат влезен и излезен
 степен на јазел, во зависност од насоченоста на ребрата кон или од јазелот
 • Маршрута: конечна низа од темиња така што две
 последователни темиња во маршрутата да се соседни• Верига: маршрута во која ниту едно ребро не се
 повторува
 • Патека: маршрута во која ниту едно теме не се повторува• Должина на патека: бројот на ребра во патеката
 •Комплетен граф: секој пар темиња е поврзан со ребро
 • Регуларен граф: ако степените на сите негови темиња се еднакви

  
  
  
